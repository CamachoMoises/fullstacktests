{"version":3,"sources":["components/Note.js","services/notes.js","components/notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","exportedObject","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","Notificacion","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","notesToShow","filter","useEffect","noteservice","initialnotes","map","i","find","n","console","log","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObjet","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c97f6ac.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? \"make not important\" : \"make important\";\r\n  return (\r\n    <li className='note'>\r\n      {note.content} \r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import axios from \"axios\";\r\n\r\nconst baseUrl = \"/api/notes/\";\r\n\r\nconst getAll = () => {\r\n  const response = axios.get(baseUrl);\r\n  return response.then((response) => response.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const response = axios.post(baseUrl, newObject);\r\n  return response.then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const response = axios.put(`${baseUrl}edit/${id}`, newObject);\r\n  return response.then((response) => response.data);\r\n};\r\nconst exportedObject = { getAll, create, update };\r\nexport default exportedObject;\r\n","import React from \"react\";\r\n\r\nconst Notificacion = ({ message }) => {\r\n  if (message === null) return null;\r\n  return <div className=\"error\">{message}</div>;\r\n};\r\nexport default Notificacion;\r\n","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport noteservice from \"./services/notes\";\nimport Notification from \"./components/notification\";\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"a new note\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important === true);\n\n  const hook = () => {\n    noteservice.getAll().then((initialnotes) => {\n      setNotes(initialnotes);\n    });\n  };\n  useEffect(hook, []);\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObjet = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n    noteservice.create(noteObjet).then((returnedNote) => {\n      console.log(returnedNote);\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    });\n  };\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    console.log(\"note to change\", note);\n    const changedNote = { ...note, important: !note.important };\n    console.log(\"changedNote\", changedNote);\n\n    noteservice\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        console.log(\"Nota retornada\", returnedNote);\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        setErrorMessage(`Note '${note.content}' was already removed from server`);\n        setTimeout(() => setErrorMessage(null), 5000);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button\n          onClick={() => {\n            setShowAll(!showAll);\n          }}\n        >\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) => (\n          <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">Save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport axios from \"axios\";\nimport './index.css'\n\nconst promise = axios.get(\"https://fullstacktests.herokuapp.com/api/notes\").then((response) => {\n  const notes = response.data;\n  // console.log(notes);\n});\n// console.log(promise);\n// const promise2 = axios.get('http://localhost:3001/foobar')\n// console.log(promise2)\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}